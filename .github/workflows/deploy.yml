name: Beautiflow CI/CD

# 언제 이 워크플로우를 실행할지 정의
on:
  # 1. main 브랜치에 코드가 push(보통 merge)될 때 실행
  push:
    branches:
      - main
  # 2. main 브랜치로 향하는 Pull Request가 생성되거나 업데이트될 때 실행
  pull_request:
    branches:
      - main

# 실제 실행될 작업들의 목록
jobs:
  build-and-deploy:
    # 이 작업이 실행될 가상 서버의 종류
    runs-on: ubuntu-latest

    # 작업 단계(순서대로 실행됨)
    steps:
      # 1. 소스 코드 가져오기
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 빌드
      # 이 단계는 push와 pull_request 모두에서 실행됩니다.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # --- 아래부터는 main 브랜치에 push 될 때만 실행되는 배포 단계 ---

      # 4. AWS 자격 증명 설정
      # if 조건을 사용하여 push 이벤트일 때만 이 단계를 실행합니다.
      - name: Configure AWS credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. 빌드 결과물을 압축하여 S3에 업로드
      - name: Upload to S3
        if: github.event_name == 'push'
        working-directory: ./
        run: |
          aws deploy push \
            --application-name beautiflow-app \
            # 수정: 빌드 파일을 'builds' 폴더 안에 저장하도록 경로 수정
            --s3-location s3://beautiflow-dev-artifacts/builds/beautiflow-api.zip \
            --source .

      # 6. AWS CodeDeploy에 배포 요청
      - name: Deploy to EC2 with CodeDeploy
        if: github.event_name == 'push'
        run: |
          aws deploy create-deployment \
            --application-name beautiflow-app \
            --deployment-group-name beautiflow-api-deployment-group \
            --s3-location bucket=beautiflow-dev-artifacts,bundleType=zip,key=builds/beautiflow-api.zip
