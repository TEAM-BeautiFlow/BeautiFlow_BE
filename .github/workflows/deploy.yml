# 워크플로우의 이름
name: Deploy API to AWS EC2

# 언제 이 워크플로우를 실행할지 정의
on:
  push:
    branches:
      - feat/#7/gitActionPipeline  # main 브랜치에 코드가 push 될 때 실행

# 실제 실행될 작업들의 목록
jobs:
  build-and-deploy:
    # 이 작업이 실행될 가상 서버의 종류
    runs-on: ubuntu-latest
    
    # 작업 단계(순서대로 실행됨)
    steps:
      # 1. 소스 코드 가져오기
      # 현재 레포지토리의 코드를 가상 서버로 내려받음
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      # 빌드를 위해 자바 17 버전을 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 빌드
      # gradlew 스크립트에 실행 권한을 주고, 프로젝트를 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # 4. AWS 자격 증명 설정
      # GitHub Secrets에 저장해둔 키를 사용하여 AWS에 로그인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 5. 빌드 결과물을 압축하여 S3에 업로드
      # CodeDeploy가 가져갈 수 있도록 빌드 결과물 전체를 압축해서 S3 버킷에 올림
      - name: Upload to S3
        working-directory: ./
        run: |
          aws deploy push \
            --application-name beautiflow-app \
            --s3-location s3://beautiflow-dev-artifacts/beautiflow-api.zip \
            --source .

      # 6. AWS CodeDeploy에 배포 요청
      # S3에 올린 파일을 EC2에 배포하라고 CodeDeploy에 명령
      - name: Deploy to EC2 with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name beautiflow-app \
            --deployment-group-name beautiflow-api-deployment-group \
            --s3-location bucket=beautiflow-dev-artifacts,bundleType=zip,key=beautiflow-api.zip
